#include "mbed.h"

/*****stepper motor********/
DigitalOut m1(p9);
DigitalOut m2(p10);
DigitalOut m3(p11);
DigitalOut m4(p12);
void stepperOn(int on);
int on;
Timer durationCounter;
/**********keypad********/
DigitalOut pin8(p21); //output pin on p21,p28,p29,p30
DigitalOut pin4(p28);
DigitalOut pin2(p29);
DigitalOut pin1(p30);

InterruptIn pin7(p23);//interrupt input in p23,p24,p25,p27
InterruptIn pin6(p24);
InterruptIn pin5(p25);
InterruptIn pin3(p27);
Timer debounce;//debounce timer
Serial pc(USBTX, USBRX);//Display on Computer

void row1(void);//function to scan row1
void row2(void);//row2
void row3(void);//row3
void row4(void);//row4
Ticker keypad_input;
void keypad();  // Function to determine keypress
bool input=false;
int buffer[3];
int threshold;
int quantity;
int n=0;
int digital=0;
/**********************************/
/**********flow rate sensor********/
DigitalOut statusLed(LED2);
InterruptIn sensorPin(p5);
float calibrationFactor = 4.5;// The hall-effect flow sensor outputs approximately 4.5 pulses per second per
int pulseCount;                     // litre/minute of flow.
float flowRate;
float flowMilliLitres;
float totalMilliLitres;
unsigned long oldTime;
unsigned int frac;
Timer TimeCounter;//debounce timer
void pulseCounter(void);//interrupt to count pulse
/***************************************/
/**********Interact with Arduino********/
DigitalIn communicatePin(p20);
float ADC = 0;
DigitalOut myled1(LED1);
DigitalOut myled2(LED2);
/***************************************/
/*****flow rate sensor********/
DigitalOut motorPin1(p14);
DigitalOut motorPin2(p13);
/**********keypad********/

extern "C" void mbed_reset(); //declare software reset
int main()
{
    TimeCounter.start();   //pulse counter of flow rate sensor
    pulseCount        = 0; //initialise all the parameters for flow rate sensor
    flowRate          = 0.0;
    flowMilliLitres   = 0;
    totalMilliLitres  = 0;
    oldTime           = 0;
    sensorPin.fall(&pulseCounter);  // The Hall-effect sensor is connected to pin 20
    // Configured to trigger on a FALLING state change (transition from HIGH
    // state to LOW state)

    pin8 = 0; //initialize all keypad output pin
    pin1 = 0;
    pin2 = 0;
    pin4 = 0;
    debounce.start();   //start debounce timer
    pin3.rise(&row1);   //rising edge will trigger interrupt
    pin5.rise(&row2);
    pin6.rise(&row3);
    pin7.rise(&row4);
    pc.printf("\n\rSet sliding time window (in sec): 15 ");
    pc.printf("\n\rPump in dosage (mL) (0~10)\n\r");  //user to input required dosage
    pc.printf("Press # when done, * to reset: ");
    int TimeInterval = 15000;   // set sliding time window

    while(input==false) {  //wait user to input dosage
        pin8=1;//turn first row pin high
        wait_ms(4);
        pin8=0; //off first row, on second row
        pin1=1;
        wait_ms(4);
        pin1=0; //off second row, on third row
        pin2=1;
        wait_ms(4);
        pin2=0; //off third row, on forth row
        pin4=1;
        wait_ms(4);
        pin4=0;
    }
    pin4=1;
    pc.printf("\n\r");
    while(1) {
        stepperOn(on);  // move the motor
        if((TimeCounter.read_ms() - oldTime) > 800) {  // Only process counters once per second
            // Disable the interrupt while calculating flow rate and sending the value to
            // the host
            __disable_irq();    // Disable Interrupts
            flowRate = (1000.0 / (TimeCounter.read_ms() - oldTime) * pulseCount) / calibrationFactor;
            oldTime = TimeCounter.read_ms();
            flowMilliLitres = (flowRate / 60) * 1000;
            totalMilliLitres += flowMilliLitres;
            float total=totalMilliLitres/10;
            
            // This condition moves the motor to continuously 
            if(total<quantity && communicatePin==1) {
            // The current total of the medicaiton is less than the required dosage
            // The heart rate is abnormal
                on=1
            } 
            
            // This condition stops the motor
            else {
                on=0;
                pc.printf("\n\r Patient condition improved. Stop medication\n\r");

            }
            
            // This condition starts the monitoring sliding time window
            if(total >= quantity && communicatePin ==1) {
                // The current total dosage has meet or exceeded the required dosage
                // The heart continues to have abnormal heart rate
                pc.printf("\n\rPatient needs medical attention. Continue medication\n\r");
                
                // Start timer for time window duration
                durationCounter.stop();
                durationCounter.reset();
                durationCounter.start(); 
                
                // Display the time passed (duration of the time window)
                int duration = 0;
                pc.printf("\n\rSliding time Window: %d sec", TimeInterval/1000);
                while(duration<TimeInterval){
                duration = durationCounter.read_ms();
                    if(duration%1000 == 0){ // only show time when it is in integers ex) 1, 2, 3, 4, ...
                        pc.printf("\n\rDuration: %d sec", duration/1000);
                    }
                }
                
                // Reset the current total medication back to 0 to restart the medication
                totalMilliLitres = 0;
            }
            
            // Show user current measures and variables
            pc.printf("Medication Flow Rate: ");
            pc.printf("%.1f",flowMilliLitres/10);
            pc.printf("mL/Sec");

            pc.printf("    Required Dosage: ");
            pc.printf("%d",quantity);
            pc.printf("mL");

            pc.printf("    Current Dosage: ");
            pc.printf("%.1f",total);
            pc.printf("mL\n\r");

            pulseCount = 0;
            __enable_irq();     // Enable Interrupts
        }
    }
}

void pulseCounter()
{
    // Increment the pulse counter
    pulseCount++;
}
void keypad()
{
    pin8=1;//turn first row pin high
    wait_ms(4);
    pin8=0; //off first row, on second row
    pin1=1;
    wait_ms(4);
    pin1=0; //off second row, on third row
    pin2=1;
    wait_ms(4);
    pin2=0; //off third row, on forth row
    pin4=1;
    wait_ms(4);
    pin4=0;
}
void row1()     //enter this function when rising edge detected on first row
{
    if (debounce.read_ms()>100) { //debounce timer to eliminate imperfection of switch


        if(pin8==1) { //if first row pin high, output "1" and correspond freq
            pc.printf("1");
            buffer[n]=1;
            n++;

        } else if (pin1==1) { //if second row pin high, output "4" and correspond freq
            pc.printf("4");
            buffer[n]=4;
            n++;

        } else if (pin2==1) { //if third row pin high, output "7" and correspond freq
            pc.printf("7");
            buffer[n]=7;
            n++;

        } else { //if forth row pin high, output "*" and correspond freq
            pc.printf("*");
            mbed_reset();
        }
    }
    debounce.reset();
}

void row2()     //enter this function when rising edge detected on second row
{
    if (debounce.read_ms()>100) { //debounce timer to eliminate imperfection of switch


        if(pin8==1) { //if first row pin high, output "2" and correspond freq
            pc.printf("2");
            buffer[n]=2;
            n++;

        } else if (pin1==1) { //if second row pin high, output "5" and correspond freq
            pc.printf("5");
            buffer[n]=5;
            n++;

        } else if (pin2==1) { //if third row pin high, output "8" and correspond freq
            pc.printf("8");
            buffer[n]=8;
            n++;

        } else { //if forth row pin high, output "0" and correspond freq
            pc.printf("0");
            buffer[n]=0;
            n++;


        }
    }
    debounce.reset();
}

void row3()     //enter this function when rising edge detected on third row
{
    if (debounce.read_ms()>100) { //debounce timer to eliminate imperfection of switch


        if(pin8==1) { //if first row pin high, output "3" and correspond freq
            pc.printf("3");
            buffer[n]=3;
            n++;

        } else if (pin1==1) { //if second row pin high, output "6" and correspond freq
            pc.printf("6");
            buffer[n]=6;
            n++;

        } else if (pin2==1) { //if third row pin high, output "9" and correspond freq
            pc.printf("9");
            buffer[n]=9;
            n++;

        } else { //if forth row pin high, output "#" and correspond freq
            pc.printf("#");
            if(n ==2) {
                quantity=buffer[0]*10+buffer[1];
                pc.printf("\tLiquid Quantity is %d mL",quantity);
            } else {
                quantity=buffer[0];
                pc.printf("\tLiquid Quantity is %d mL",quantity);
            }

            pc.printf("\n\r");
            input = true;
            n = 0;


        }
    }
    debounce.reset();
}

void row4()     //we are not using this function in the actual roll out
{
    if (debounce.read_ms()>100) { //debounce timer to eliminate imperfection of switch


        if(pin8==1) { //if first row pin high, output "A" and correspond freq
//            pc.printf("A");

        } else if (pin1==1) { //if second row pin high, output "B" and correspond freq
//            pc.printf("B");

        } else if (pin2==1) { //if third row pin high, output "C" and correspond freq
//            pc.printf("C");

        } else { //if forth row pin high, output "D" and correspond freq
//            pc.printf("D");
            on=2;
        }
    }
    debounce.reset();
}

void stepperOn(int motorOn)
{
    // motorOn == 1 is on, ==0 is off
    if (motorOn == 1) {
        {
            // rotate the motor 1 step anticlockwise
            for (int i = 1; i < 5; i++) {
                switch (i) { // activate the ports A0, A2, A3, A3 in a binary sequence for steps
                    case 4: {
                        m1=1;
                        m2=0;
                        m3=1;
                        m4=0;
                    }
                    break;
                    case 3: {
                        m1=0;
                        m2=1;
                        m3=1;
                        m4=0;
                    }
                    break;
                    case 2: {
                        m1=0;
                        m2=1;
                        m3=0;
                        m4=1;
                    }
                    break;
                    case 1: {
                        m1=1;
                        m2=0;
                        m3=0;
                        m4=1;
                    }
                    break;
                }
                wait_us(1500); // wait time defines the speed
            }
        }
    }
    if (motorOn == 2) {
        // rotate the motor 1 step clockwise
        for (int i = 1; i < 5; i++) {
            switch (i) { // activate the ports A0, A2, A3, A3 in a binary sequence for steps
                case 1: {
                    m1=1;
                    m2=0;
                    m3=1;
                    m4=0;
                }
                break;
                case 2: {
                    m1=0;
                    m2=1;
                    m3=1;
                    m4=0;
                }
                break;
                case 3: {
                    m1=0;
                    m2=1;
                    m3=0;
                    m4=1;
                }
                break;
                case 4: {
                    m1=1;
                    m2=0;
                    m3=0;
                    m4=1;
                }
                break;
            }
            wait_us(1500); // wait time defines the speed
        }
    } else {
        m1=0;
        m2=0;
        m3=0;
        m4=0;
    }
}

